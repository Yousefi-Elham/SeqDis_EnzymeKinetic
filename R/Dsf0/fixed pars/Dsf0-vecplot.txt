max.iter <- 500

norm.sum.crit.ds <- c( 1.038071 ,1.330466 ,1.659998 ,1.863182 ,2.089220 ,2.211011 ,2.334719 ,2.390109 ,2.515641 ,2.597155 ,2.695007 ,2.754255 ,2.813090 ,2.832648 ,2.896340
                       ,2.939005 ,2.991812 ,3.024421 ,3.059321 ,3.045290 ,3.080015 ,3.092300 ,3.126021 ,3.163989 ,3.190303 ,3.218248 ,3.241208 ,3.258991 ,3.267064 ,3.292632
                       ,3.307772 ,3.330487 ,3.346013 ,3.359437 ,3.373150 ,3.378618 ,3.390303 ,3.406169 ,3.400789 ,3.414597 ,3.427605 ,3.440138 ,3.448823 ,3.452967 ,3.467141
                       ,3.477368 ,3.487868 ,3.497215 ,3.504363 ,3.512865 ,3.515745 ,3.523410 ,3.532072 ,3.539106 ,3.545161 ,3.540342 ,3.548368 ,3.553711 ,3.561111 ,3.565367
                       ,3.572185 ,3.578766 ,3.585098 ,3.589706 ,3.595566 ,3.597350 ,3.602737 ,3.608378 ,3.613392 ,3.617420 ,3.622070 ,3.624677 ,3.628974 ,3.631295 ,3.628313
                       ,3.633279 ,3.637812 ,3.642474 ,3.645713 ,3.650078 ,3.651304 ,3.655368 ,3.659371 ,3.663192 ,3.666072 ,3.669654 ,3.672147 ,3.674904 ,3.676540 ,3.679668
                       ,3.682291 ,3.685226 ,3.682881 ,3.685296 ,3.688721 ,3.689624 ,3.692844 ,3.695844 ,3.698893 ,3.701083 ,3.703964 ,3.706039 ,3.708145 ,3.709367 ,3.711926
                       ,3.713948 ,3.716367 ,3.718071 ,3.720026 ,3.720378 ,3.722519 ,3.720862 ,3.723213 ,3.725730 ,3.727469 ,3.729861 ,3.731632 ,3.733305 ,3.734256 ,3.736409
                       ,3.738021 ,3.740068 ,3.741556 ,3.743124 ,3.743398 ,3.745235 ,3.746748 ,3.748493 ,3.749551 ,3.751207 ,3.750088 ,3.751629 ,3.753012 ,3.753776 ,3.755626
                       ,3.756955 ,3.758722 ,3.760041 ,3.761338 ,3.762588 ,3.763163 ,3.764420 ,3.765951 ,3.767073 ,3.768302 ,3.769364 ,3.770238 ,3.770643 ,3.771964 ,3.771100
                       ,3.772227 ,3.773778 ,3.774961 ,3.776055 ,3.777182 ,3.777660 ,3.778724 ,3.780085 ,3.781107 ,3.782151 ,3.783124 ,3.783877 ,3.784216 ,3.785406 ,3.786283
                       ,3.787279 ,3.788113 ,3.787250 ,3.788197 ,3.789223 ,3.789627 ,3.790543 ,3.791766 ,3.792704 ,3.793604 ,3.794501 ,3.795157 ,3.795447 ,3.796528 ,3.797344
                       ,3.798209 ,3.798989 ,3.799624 ,3.800367 ,3.800558 ,3.801179 ,3.802093 ,3.801584 ,3.802450 ,3.803244 ,3.804075 ,3.804661 ,3.805458 ,3.805902 ,3.806665
                       ,3.807432 ,3.808163 ,3.808732 ,3.809432 ,3.809600 ,3.810267 ,3.811006 ,3.811645 ,3.812198 ,3.812809 ,3.812227 ,3.812755 ,3.813499 ,3.813888 ,3.814603
                       ,3.815289 ,3.815977 ,3.816492 ,3.817153 ,3.817302 ,3.817935 ,3.818598 ,3.819206 ,3.819709 ,3.820292 ,3.820639 ,3.821198 ,3.821426 ,3.821960 ,3.821447
                       ,3.822065 ,3.822714 ,3.823184 ,3.823810 ,3.823943 ,3.824544 ,3.825145 ,3.825724 ,3.826183 ,3.826741 ,3.827145 ,3.827599 ,3.827803 ,3.828317 ,3.828765
                       ,3.829260 ,3.829578 ,3.830052 ,3.829608 ,3.830058 ,3.830301 ,3.830849 ,3.831401 ,3.831823 ,3.832356 ,3.832754 ,3.833172 ,3.833356 ,3.833851 ,3.834264
                       ,3.834741 ,3.835089 ,3.835498 ,3.835831 ,3.835961 ,3.836364 ,3.836789 ,3.836391 ,3.836782 ,3.837292 ,3.837681 ,3.838068 ,3.838235 ,3.838712 ,3.839095
                       ,3.839555 ,3.839899 ,3.840279 ,3.840609 ,3.840729 ,3.841104 ,3.841517 ,3.841793 ,3.842192 ,3.842481 ,3.842756 ,3.842404 ,3.842557 ,3.843016 ,3.843372
                       ,3.843817 ,3.844156 ,3.844510 ,3.844837 ,3.844948 ,3.845297 ,3.845699 ,3.846001 ,3.846348 ,3.846638 ,3.846897 ,3.846968 ,3.847330 ,3.847586 ,3.847936
                       ,3.847616 ,3.847950 ,3.848282 ,3.848604 ,3.848707 ,3.849034 ,3.849425 ,3.849724 ,3.850049 ,3.850338 ,3.850584 ,3.850861 ,3.851004 ,3.851248 ,3.851590
                       ,3.851847 ,3.852089 ,3.852336 ,3.852370 ,3.852078 ,3.852385 ,3.852765 ,3.853061 ,3.853367 ,3.853653 ,3.853886 ,3.854163 ,3.854295 ,3.854562 ,3.854862
                       ,3.855119 ,3.855350 ,3.855597 ,3.855630 ,3.855859 ,3.856164 ,3.856393 ,3.856620 ,3.856357 ,3.856640 ,3.856862 ,3.857136 ,3.857260 ,3.857525 ,3.857809
                       ,3.858065 ,3.858285 ,3.858532 ,3.858565 ,3.858783 ,3.859082 ,3.859313 ,3.859530 ,3.859752 ,3.859909 ,3.860123 ,3.860188 ,3.859945 ,3.860207 ,3.860476
                       ,3.860731 ,3.860941 ,3.861187 ,3.861219 ,3.861457 ,3.861722 ,3.861953 ,3.862160 ,3.862383 ,3.862535 ,3.862751 ,3.862812 ,3.863020 ,3.863225 ,3.863426
                       ,3.863577 ,3.863356 ,3.863601 ,3.863786 ,3.863869 ,3.864121 ,3.864351 ,3.864550 ,3.864773 ,3.864920 ,3.865136 ,3.865195 ,3.865404 ,3.865600 ,3.865802
                       ,3.865949 ,3.866144 ,3.866285 ,3.866431 ,3.866515 ,3.866698 ,3.866539 ,3.866729 ,3.866952 ,3.867120 ,3.867310 ,3.867367 ,3.867576 ,3.867765 ,3.867968
                       ,3.868110 ,3.868306 ,3.868452 ,3.868594 ,3.868674 ,3.868858 ,3.869000 ,3.869178 ,3.869306 ,3.869118 ,3.869301 ,3.869355 ,3.869564 ,3.869745 ,3.869948
                       ,3.870087 ,3.870284 ,3.870433 ,3.870571 ,3.870647 ,3.870832 ,3.870970 ,3.871150 ,3.871283 ,3.871420 ,3.871548 ,3.871605 ,3.871742 ,3.871905 ,3.871767
                       ,3.871924 ,3.872098 ,3.872250 ,3.872385 ,3.872458 ,3.872644 ,3.872777 ,3.872958 ,3.873095 ,3.873229 ,3.873361 ,3.873416 ,3.873549 ,3.873714 ,3.873837
                       ,3.873969 ,3.874087 ,3.873924 ,3.874055 ,3.874125 ,3.874311 ,3.874441 ,3.874622 ,3.874762 ,3.874892 ,3.875028 ,3.875080 ,3.875210 ,3.875376 ,3.875503
                       ,3.875632 ,3.875754 ,3.875849 ,3.875885 ,3.876037 ,3.876151 ,3.876279 ,3.876158 ,3.876301 ,3.876427 ,3.876566 ,3.876616 ,3.876742 ,3.876909 ,3.877039
                       ,3.877165 ,3.877291 ,3.877384 ,3.877419 ,3.877573 ,3.877690 ,3.877816 ,3.877929 ,3.878022 ,3.878132 ,3.877989 ,3.878038 ,3.878160 ,3.878328 ,3.878460
                       ,3.878583 ,3.878711 ,3.878803 ,3.878927 ,3.878992)


#compute
which(norm.sum.crit.ds >= max(norm.sum.crit.ds))[1]



plot(seq(1:max.iter),norm.sum.crit.ds , type = "p",ylim=c(0,4),xlab="iter",ylab="Norm.Criterion",pch=16,col="blue")
abline(h=median(norm.sum.crit.ds),lty=2,col="red")

#plot(seq(1:max.iter),norm.sum.crit.ds/14 , type = "p",ylim=c(0,0.3),xlab="iter",ylab="Norm.Criterion",pch=16,col="blue")

quantile(norm.sum.crit.ds)
per0.5 <- quantile(norm.sum.crit.ds)[3]-quantile(norm.sum.crit.ds)[1]
per0.5 / (max(norm.sum.crit.ds)-min(norm.sum.crit.ds))

which(norm.sum.crit.ds >= 3*norm.sum.crit.ds[1])[1]
length(which(norm.sum.crit.ds >= 3*norm.sum.crit.ds[1]))
boxplot(norm.sum.crit.ds)

quanDs <- quantile(norm.sum.crit.ds, probs = c(0.02,0.05,0.10,0.25,0.5,0.75,0.9,0.95,1))
quanDs
#compute

earlyiterds <- numeric(length(quanDs))
for(i in 1:length(quanDs)){
  earlyiterds[i] <- which(norm.sum.crit.ds >= quanDs[i])[1]
}
earlyiterds
#earlyiterds
#[1]  11  26  51 126 251 375 451 476 500