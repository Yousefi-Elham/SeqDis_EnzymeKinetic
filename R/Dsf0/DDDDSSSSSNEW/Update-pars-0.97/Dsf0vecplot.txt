max.iter <- 500

norm.sum.crit.ds <- c(  
  0.8259951 ,1.0918635 ,1.3454650 ,1.2033138 ,1.3946134 ,1.9512433 ,2.0424023 ,2.0338340 ,2.1239586 ,1.9590656 ,2.5380671 ,2.5723205 ,2.6576263 ,2.5981940
  ,2.5608678 ,2.5933772 ,2.6346118 ,2.6762348 ,2.7408551 ,2.7424681 ,2.7893930 ,2.7548193 ,2.7913417 ,2.8588065 ,2.8487638 ,2.8374969 ,2.8651898 ,2.8804198
  ,2.8889528 ,3.1690986 ,3.1272380 ,3.1314210 ,3.1419806 ,3.1404616 ,3.1343795 ,3.1478199 ,3.4381369 ,3.4474134 ,3.4461096 ,3.4636774 ,3.4510007 ,3.4948917
  ,3.5031924 ,3.4976483 ,3.5249242 ,3.5395038 ,3.5283724 ,3.5008061 ,3.4980939 ,3.4709524 ,3.4331727 ,3.6496663 ,3.6550988 ,3.6627010 ,3.6628337 ,3.6664637
  ,3.6551222 ,3.6412000 ,3.6521407 ,3.8723580 ,3.8444041 ,3.8831778 ,3.8767400 ,3.8846578 ,3.8692526 ,3.8794984 ,3.8856131 ,3.8848863 ,3.8733570 ,3.8680977
  ,3.8591142 ,3.8640397 ,3.8442182 ,3.8505399 ,4.0164912 ,4.0151536 ,4.0274150 ,4.0398629 ,4.0415396 ,4.0526652 ,4.0577026 ,4.0559178 ,4.1266336 ,4.1301030
  ,4.1384111 ,4.1489006 ,4.1387820 ,4.1310070 ,4.1346079 ,4.2356142 ,4.2503094 ,4.2505037 ,4.2428314 ,4.2409518 ,4.2495214 ,4.2432178 ,4.3085050 ,4.2987504
  ,4.2868602 ,4.2785401 ,4.2759776 ,4.2703792 ,4.2584066 ,4.2577991 ,4.2352867 ,4.2451302 ,4.2298387 ,4.2349344 ,4.2360526 ,4.2377325 ,4.2494865 ,4.2480131
  ,4.3415440 ,4.3320607 ,4.3329241 ,4.3286583 ,4.3348317 ,4.3177765 ,4.3567888 ,4.3583256 ,4.4015113 ,4.4142919 ,4.4170693 ,4.4238526 ,4.4250029 ,4.4345841
  ,4.4569213 ,4.4520241 ,4.4562214 ,4.4498051 ,4.4550606 ,4.4436666 ,4.4454816 ,4.4229562 ,4.4674886 ,4.4671749 ,4.4531736 ,4.4272955 ,4.4240522 ,4.4286529
  ,4.4293018 ,4.4222958 ,4.4202791 ,4.4491361 ,4.4553034 ,4.4529949 ,4.4466276 ,4.4460581 ,4.4433764 ,4.4093717 ,4.4171163 ,4.4268080 ,4.4248922 ,4.4325284
  ,4.4347454 ,4.4221240 ,4.4198464 ,4.4356191 ,4.4341986 ,4.4497267 ,4.4579842 ,4.4603376 ,4.4623612 ,4.4549299 ,4.4595068 ,4.4868205 ,4.4823372 ,4.4766934
  ,4.4807869 ,4.4905915 ,4.4847544 ,4.4739984 ,4.4417068 ,4.4404871 ,4.4394250 ,4.4425823 ,4.4489956 ,4.4325896 ,4.4206089 ,4.4245017 ,4.3907738 ,4.3858908
  ,4.3785686 ,4.3699922 ,4.3624053 ,4.3651625 ,4.4044942 ,4.4034288 ,4.3939976 ,4.3843281 ,4.3815009 ,4.3673598 ,4.3665701 ,4.3718927 ,4.3444845 ,4.3416278
  ,4.3506013 ,4.3436822 ,4.3385242 ,4.3697654 ,4.3683420 ,4.3491139 ,4.3547300 ,4.3486536 ,4.3410769 ,4.3354947 ,4.3355134 ,4.3330990 ,4.3773277 ,4.3726606
  ,4.3654257 ,4.3574476 ,4.3606210 ,4.3557848 ,4.3492577 ,4.3899502 ,4.3842574 ,4.3744167 ,4.3785844 ,4.3714589 ,4.3761721 ,4.3707157 ,4.3772522 ,4.3706801
  ,4.3548057 ,4.3479030 ,4.3473098 ,4.3545171 ,4.3471564 ,4.3602597 ,4.3963884 ,4.3962577 ,4.3985312 ,4.4033431 ,4.3966413 ,4.3879827 ,4.3783648 ,4.3772905
  ,4.3951350 ,4.3921933 ,4.4159528 ,4.4132588 ,4.4118562 ,4.4004305 ,4.3955684 ,4.4019361 ,4.4460817 ,4.4478869 ,4.4439798 ,4.4415200 ,4.4362638 ,4.4380818
  ,4.4386641 ,4.4301604 ,4.4317163 ,4.4258463 ,4.4318655 ,4.4262203 ,4.4098182 ,4.4021475 ,4.4067474 ,4.4046069 ,4.3687915 ,4.3605462 ,4.3550718 ,4.3556872
  ,4.3575579 ,4.3608667 ,4.3828858 ,4.3861505 ,4.3803926 ,4.3742196 ,4.3759764 ,4.3659589 ,4.3728044 ,4.3691928 ,4.3720304 ,4.3667836 ,4.3643372 ,4.3616558
  ,4.3598980 ,4.3557860 ,4.3589573 ,4.3547425 ,4.3511855 ,4.3498374 ,4.3475552 ,4.3586510 ,4.3539371 ,4.3507542 ,4.3481676 ,4.3475369 ,4.3445978 ,4.3748189
  ,4.3731076 ,4.3740095 ,4.3704145 ,4.3627531 ,4.3597753 ,4.3759253 ,4.3763063 ,4.3694791 ,4.3620088 ,4.3659645 ,4.3605889 ,4.3562886 ,4.3579015 ,4.3600787
  ,4.3735928 ,4.3681115 ,4.3666901 ,4.3711566 ,4.3745294 ,4.3719783 ,4.3693870 ,4.3644502 ,4.3579981 ,4.3558918 ,4.3476220 ,4.3479454 ,4.3481868 ,4.3475914
  ,4.3506353 ,4.3517079 ,4.3651777 ,4.3637726 ,4.3579815 ,4.3583016 ,4.3604459 ,4.3287288 ,4.3269573 ,4.3250053 ,4.3215500 ,4.3202654 ,4.3178140 ,4.3144024
  ,4.3123680 ,4.2991642 ,4.2996785 ,4.2980300 ,4.2980838 ,4.2999949 ,4.2947609 ,4.3102976 ,4.3241637 ,4.3184093 ,4.3172968 ,4.3146224 ,4.3170456 ,4.3178673
  ,4.3160233 ,4.3177337 ,4.3186216 ,4.3189014 ,4.3165219 ,4.3132673 ,4.3161319 ,4.3187723 ,4.3463966 ,4.3449096 ,4.3508972 ,4.3491689 ,4.3524554 ,4.3511333
  ,4.3406852 ,4.3352400 ,4.3362801 ,4.3044587 ,4.3001731 ,4.2980927 ,4.2966849 ,4.2957170 ,4.2902854 ,4.2874440 ,4.3111892 ,4.3146451 ,4.3143991 ,4.3129027
  ,4.3168485 ,4.3159057 ,4.3158159 ,4.3449942 ,4.3425523 ,4.3398388 ,4.3387936 ,4.3451855 ,4.3418704 ,4.3465904 ,4.3484610 ,4.3457057 ,4.3481242 ,4.3453928
  ,4.3497790 ,4.3484145 ,4.3439056 ,4.3480943 ,4.3654722 ,4.3629929 ,4.3665232 ,4.3676336 ,4.3629870 ,4.3612847 ,4.3605024 ,4.3602989 ,4.3901069 ,4.3926816
  ,4.3908204 ,4.3893080 ,4.3930134 ,4.3850388 ,4.3814411 ,4.3845810 ,4.3834513 ,4.3834188 ,4.3811231 ,4.3806806 ,4.3846963 ,4.3793316 ,4.3802087 ,4.3890167
  ,4.3895517 ,4.3885725 ,4.3868768 ,4.3821375 ,4.3885959 ,4.3878877 ,4.3992047 ,4.4010008 ,4.3988323 ,4.3942383 ,4.3928160 ,4.3927813 ,4.3922584 ,4.3958035
  ,4.4036979 ,4.4016666 ,4.4033828 ,4.4042169 ,4.4036071 ,4.4002196 ,4.3939826 ,4.3936318 ,4.3895494 ,4.3836810 ,4.3835288 ,4.3926890 ,4.3936294 ,4.3904066
  ,4.3875502 ,4.3873051 ,4.3872610 ,4.3842312 ,4.3825477 ,4.3827086 ,4.3825824 ,4.3723996 ,4.3719460 ,4.3707973 ,4.3682090 ,4.3692737 ,4.3680452 ,4.3618707
  ,4.3619651 ,4.3734128 ,4.3733043 ,4.3790343 ,4.3783967 ,4.3796868 ,4.3780972 ,4.3794196 ,4.3819354 ,4.3796054 ,4.3786762 ,4.3785772 ,4.3796658 ,4.3795768
  ,4.3775762 ,4.3778349 ,4.3820681 ,4.3815859 ,4.3790298 ,4.3769299 ,4.3767017 ,4.3759539 ,4.3851434 ,4.4025017 ,4.4054822 ,4.4004785 ,4.3991449 ,4.3998162
  ,4.4061141 ,4.4010340 ,4.4079263 ,4.4076940 ,4.4037987 ,4.4022366 ,4.4004428 ,4.3978537 ,4.3958661 ,4.3834691)

max(norm.sum.crit.ds)
max(norm.sum.crit.ds)/13

plot(seq(1:max.iter),norm.sum.crit.ds , type = "p",ylim=c(0,5),xlab="iter",ylab=bquote ( paste("Norm.Criterion ", Ds)),pch=16,col="blue")
abline(h=max(norm.sum.crit.ds),lty=2,col="red")

#plot(seq(1:max.iter),norm.sum.crit.ds/13 , type = "p",ylim=c(0,0.3),xlab="iter",ylab="Norm.Criterion Ds",pch=16,col="blue")
#abline(h=median(norm.sum.crit.ds/13),lty=2,col="red")

quantile(norm.sum.crit.ds)
per0.5 <- quantile(norm.sum.crit.ds)[3]-quantile(norm.sum.crit.ds)[1]
per0.5 / (max(norm.sum.crit.ds)-min(norm.sum.crit.ds))

#compute
which(norm.sum.crit.ds/13 >= max(norm.sum.crit.ds/13)/2)[1]

which(norm.sum.crit.ds >= 3*norm.sum.crit.ds[1])[1]
length(which(norm.sum.crit.ds >= 3*norm.sum.crit.ds[1]))
boxplot(norm.sum.crit.ds)

quanDs <-  c(0.25,0.5,0.75,0.9,0.95)
quanDs
25%      50%      75%      90%      95% 
4.309849 4.362207 4.392210 4.429388 4.447942 


earlyiterdsup <- numeric(length(quanDs))
for(i in 1:length(quanDs)){
  earlyiterdsup[i] <- which(norm.sum.crit.ds >= max(norm.sum.crit.ds)*quanDs[i])[1]
}
earlyiterdsup
[1]  3 11 37 79 97

